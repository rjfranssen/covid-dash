query$index <- 1
query$startdate <- '2019-10-01'
enddate <- '2019-11-01'
starttime <- '12:00'
# Make the GET request, passing along the parameters, storing the response, then parsing the response
response <- credentials$OAuthRequest(tkURL, query)
jsonlite::fromJSON(response)
# Make the GET request, passing along the parameters, storing the response, then parsing the response
response <- credentials$OAuthRequest(tkURL, query)
# Set the API endpoint
tkURL <- 'https://api.tradeking.com/v1/market/toplists/toppctgainers.json'
# Params
#A:	American Stock Exchange
#N:	New York Stock Exchange
#Q:	NASDAQ
#U:	NASDAQ Bulletin Board
#V:	NASDAQ OTC Other
query <- list()
query$exchange <- 'N'
# Make the GET request, passing along the parameters, storing the response, then parsing the response
response <- credentials$OAuthRequest(tkURL, query) #Error: Internal Server Error
jsonlite::fromJSON(response)
# Set the API endpoint
tkURL <- 'https://api.tradeking.com/v1/member/profile.json'
# Make the GET request, passing along the parameters, storing the response, then parsing the response
response <- credentials$OAuthRequest(tkURL) #Error: Internal Server Error
jsonlite::fromJSON(response)
# Set the API endpoint
tkURL <- 'https://api.tradeking.com/v1/utility/status.json'
# Make the GET request, passing along the parameters, storing the response, then parsing the response
response <- credentials$OAuthRequest(tkURL) #Error: Internal Server Error
jsonlite::fromJSON(response)
# Set the API endpoint
tkURL <- 'https://api.tradeking.com/v1/utility/version.json'
# Make the GET request, passing along the parameters, storing the response, then parsing the response
response <- credentials$OAuthRequest(tkURL) #Error: Internal Server Error
jsonlite::fromJSON(response)
jsonlite::fromJSON(response) %>% data.frame()
# Set the API endpoint
tkURL <- 'https://api.tradeking.com/v1/watchlists.json'
# Make the GET request, passing along the parameters, storing the response, then parsing the response
response <- credentials$OAuthRequest(tkURL) #Error: Internal Server Error
jsonlite::fromJSON(response)
# Set the API endpoint
tkURL <- "https://api.tradeking.com/v1/market/news/search.json"
query <- list()
query$symbols <- c('tsla,ibm,aapl')
query$maxhits <- 100
query$startdate <- '2019-06-01'
query$enddate <- '2019-11-30'
# Make the GET request, passing along the parameters, storing the response, then parsing the response
response <- credentials$OAuthRequest(tkURL, query)
jsonlite::fromJSON(response)
articles <- jsonlite::fromJSON(response) %>% data.frame()
articles <- jsonlite::fromJSON(response)
articles$response
articles$response$articles
articles$response$articles()
articles$response$articles$article
install.packages("link_to_file", repos = NULL, type="source")
query$symbols <- c('tsla,ibm,aapl')
query$maxhits <- 100
query$startdate <- '2019-06-07'
query$enddate <- '2020-07-07'
# Set the API endpoint
tkURL <- "https://api.tradeking.com/v1/market/news/search.json"
# Make the GET request, passing along the parameters, storing the response, then parsing the response
response <- credentials$OAuthRequest(tkURL, query)
articles <- jsonlite::fromJSON(response)
articles
articles <- jsonlite::fromJSON(response) %>% data.frame()
articles
articles
View(articles)
articles <- jsonlite::fromJSON(response) %>% data.table::data.table()
articles
articles <- jsonlite::fromJSON(response) %>% DT::datatable()
articles <- jsonlite::fromJSON(response) %>% data.frame()
articles
article_id <- '2938-A2210666-2N9GK800UL3D8JG7FPB4T5C0Q4'
idURL <- paste0("https://api.tradeking.com/v1/market/news/", article_id, ".json")
# Make the GET request, passing along the parameters, storing the response, then parsing the response
article_response <- credentials$OAuthRequest(idURL) # Error: Internal Server Error
jsonlite::fromJSON(article_response)
article_id <- '2938-A2209457-4H4I82VDU1OJ8J86PI9NVT2FES'
idURL <- paste0("https://api.tradeking.com/v1/market/news/", article_id, ".json")
# Make the GET request, passing along the parameters, storing the response, then parsing the response
article_response <- credentials$OAuthRequest(idURL) # Error: Internal Server Error
jsonlite::fromJSON(article_response)
idURL <- paste0("https://api.tradeking.com/v1/market/news/", article_id, ".xml")
# Make the GET request, passing along the parameters, storing the response, then parsing the response
article_response <- credentials$OAuthRequest(idURL) # Error: Internal Server Error
article_response
article_id <- '2938-A2207921-58K4T40U14A5F7CR3IC65EACII'
idURL <- paste0("https://api.tradeking.com/v1/market/news/", article_id, ".json")
# Make the GET request, passing along the parameters, storing the response, then parsing the response
article_response <- credentials$OAuthRequest(idURL) # Error: Internal Server Error
jsonlite::fromJSON(article_response)
article_id <- '234899d5fd2ee9a501a8349a0f571f6f'
idURL <- paste0("https://api.tradeking.com/v1/market/news/", article_id, ".json")
# Make the GET request, passing along the parameters, storing the response, then parsing the response
article_response <- credentials$OAuthRequest(idURL) # Error: Internal Server Error
shiny::runApp('smashatlas/psds/PSDS4300 - Advanced Data Visualization II/final-proj-school')
shiny::runApp('smashatlas/psds/PSDS4300 - Advanced Data Visualization II/final-proj-school')
install.packages("Rcpp")
shiny::runApp('smashatlas/psds/PSDS4300 - Advanced Data Visualization II/final-proj-school')
###################################################
# Load libraries
###################################################
library(shiny)
library(shinydashboard)
library(dygraphs)
library(ggplot2)
library(TTR)
library(rvest)
library(xts)
library(rvest)
#library(DT)
library(jsonlite)
#library(sf)
library(leaflet)
library(lubridate)
#library(rjson)
#library(geojsonio)
library(httr)
library(dplyr)
library(data.table)
library(leaflet)
#library(geojsonR)
library(rgdal)
library(geofacet)
library(zoo)
library(plotly)
#library(RJSONIO)
#library(rmapshaper)
source('dashboardthemes.r')
options(scipen = 999)
###################################################
# Prep COVID-19 Data
###################################################
# Doing all the conditioning separarely in this r scipt
#source('source_covid_data.r')
# Initialize state metrics
state_metrics <- c()
# Load data from COVID Tracker
states_current <- jsonlite::fromJSON('https://covidtracking.com/api/states')
states_daily <- jsonlite::fromJSON('https://covidtracking.com/api/states/daily')
states_info <- jsonlite::fromJSON('https://covidtracking.com/api/states/info')
us_current <- jsonlite::fromJSON('http://covidtracking.com/api/us')
us_daily <- jsonlite::fromJSON('https://covidtracking.com/api/us/daily')
#Fix dates
#str(states_current$date)
states_current$date <- as.character(states_current$date)
states_current$date <- as.Date(as.character(states_current$date),format="%Y%m%d")
#str(states_daily$date)
states_daily$date <- as.character(states_daily$date)
states_daily$date <- as.Date(as.character(states_daily$date),format="%Y%m%d")
# Join states_info for additional data and state names
states_current <- states_current %>% left_join (states_info, by="state")
states_daily <- states_daily %>% left_join (states_info, by="state")
# Get list of metrics for selection
metrics_options <- c('positive', 'negative', 'hospitalizedCurrently', 'hospitalizedCumulative', 'inIcuCurrently', 'inIcuCumulative', 'onVentilatorCurrently', 'onVentilatorCumulative', 'recovered', 'death', 'hospitalized', 'totalTestsViral', 'positiveTestsViral', 'negativeTestsViral', 'positiveIncrease', 'negativeIncrease', 'total', 'totalTestResults', 'deathIncrease', 'hospitalizedIncrease')
# State Names selector
state_names <- unique(states_current$name)
###################################################
# Need to do pre-processing to create static GeoJSON that I'm going to read in directly for the js leaflet map
# The R leaflet map is going to read in the current GeoJSON info dynamically
# If I had RJSONIO, I could make this dynamic for the js map, too
###################################################
# Create spatialpointsdataframe
states_geo <- rgdal::readOGR("gz_2010_us_040_00_20m.json")
# Simplify the geometry information of GeoJSON (reduce file fize!)
#states_geo <- rmapshaper::ms_simplify(states_geo)
# save the rownames
rnames <- rownames(states_geo@data)
# Add COVID data
states_geo@data <- states_geo@data %>% left_join(states_current, by=c("NAME" = "name"))
# Clone for r leaflet map
states_geo_r <- data.table::copy(states_geo)
setwd("~/smashatlas/psds/PSDS4300 - Advanced Data Visualization II/final-proj-school")
# Initialize state metrics
state_metrics <- c()
# Load data from COVID Tracker
states_current <- jsonlite::fromJSON('https://covidtracking.com/api/states')
states_daily <- jsonlite::fromJSON('https://covidtracking.com/api/states/daily')
states_info <- jsonlite::fromJSON('https://covidtracking.com/api/states/info')
us_current <- jsonlite::fromJSON('http://covidtracking.com/api/us')
us_daily <- jsonlite::fromJSON('https://covidtracking.com/api/us/daily')
#Fix dates
#str(states_current$date)
states_current$date <- as.character(states_current$date)
states_current$date <- as.Date(as.character(states_current$date),format="%Y%m%d")
#str(states_daily$date)
states_daily$date <- as.character(states_daily$date)
states_daily$date <- as.Date(as.character(states_daily$date),format="%Y%m%d")
# Join states_info for additional data and state names
states_current <- states_current %>% left_join (states_info, by="state")
states_daily <- states_daily %>% left_join (states_info, by="state")
# Get list of metrics for selection
metrics_options <- c('positive', 'negative', 'hospitalizedCurrently', 'hospitalizedCumulative', 'inIcuCurrently', 'inIcuCumulative', 'onVentilatorCurrently', 'onVentilatorCumulative', 'recovered', 'death', 'hospitalized', 'totalTestsViral', 'positiveTestsViral', 'negativeTestsViral', 'positiveIncrease', 'negativeIncrease', 'total', 'totalTestResults', 'deathIncrease', 'hospitalizedIncrease')
# State Names selector
state_names <- unique(states_current$name)
###################################################
# Need to do pre-processing to create static GeoJSON that I'm going to read in directly for the js leaflet map
# The R leaflet map is going to read in the current GeoJSON info dynamically
# If I had RJSONIO, I could make this dynamic for the js map, too
###################################################
# Create spatialpointsdataframe
states_geo <- rgdal::readOGR("gz_2010_us_040_00_20m.json")
# Simplify the geometry information of GeoJSON (reduce file fize!)
#states_geo <- rmapshaper::ms_simplify(states_geo)
# save the rownames
rnames <- rownames(states_geo@data)
# Add COVID data
states_geo@data <- states_geo@data %>% left_join(states_current, by=c("NAME" = "name"))
# Clone for r leaflet map
states_geo_r <- data.table::copy(states_geo)
state_trends_plot <- ggplot(states_daily, aes(x=date, y=positiveIncrease)) +
geom_line() +
facet_geo(~state, grid="us_state_grid2") +
#facet_geo(~state, grid="us_state_grid2", scales="free_y") +
scale_x_date() +
theme_minimal() +
ylab("Positive COVID Cases")
state_trends_plot
#output$state_trends_facet_plot <- renderPlot({
state_trends_plot <- ggplot(states_daily, aes(x=date, y=positiveIncrease)) +
geom_line() +
facet_geo(~state, grid="us_state_grid2") +
#facet_geo(~state, grid="us_state_grid2", scales="free_y") +
scale_x_date() +
theme_minimal() +
ylab("Positive COVID Cases")
library(geofacet)
install.packages("geofacet")
library(geofacet)
#output$state_trends_facet_plot <- renderPlot({
state_trends_plot <- ggplot(states_daily, aes(x=date, y=positiveIncrease)) +
geom_line() +
facet_geo(~state, grid="us_state_grid2") +
#facet_geo(~state, grid="us_state_grid2", scales="free_y") +
scale_x_date() +
theme_minimal() +
ylab("Positive COVID Cases")
state_trends_plot
state_trends_plot
setwd("~/smashatlas/psds/PSDS4300 - Advanced Data Visualization II/final-proj-school")
shiny::runApp()
library(shiny)
library(shinydashboard)
library(dygraphs)
library(ggplot2)
library(TTR)
library(rvest)
library(xts)
library(rvest)
#library(DT)
library(jsonlite)
#library(sf)
library(leaflet)
library(lubridate)
#library(rjson)
#library(geojsonio)
library(httr)
library(dplyr)
library(data.table)
library(leaflet)
#library(geojsonR)
library(rgdal)
#library(geofacet)
library(zoo)
library(plotly)
#library(RJSONIO)
#library(rmapshaper)
source('dashboardthemes.r')
options(scipen = 999)
?mekt
?melt
runApp()
# Load data from COVID Tracker
states_current <- jsonlite::fromJSON('https://covidtracking.com/api/states')
states_daily <- jsonlite::fromJSON('https://covidtracking.com/api/states/daily')
states_info <- jsonlite::fromJSON('https://covidtracking.com/api/states/info')
us_current <- jsonlite::fromJSON('http://covidtracking.com/api/us')
us_daily <- jsonlite::fromJSON('https://covidtracking.com/api/us/daily')
shiny::runApp()
###################################################
# Load libraries
###################################################
library(shiny)
library(shinydashboard)
library(dygraphs)
library(ggplot2)
library(TTR)
library(rvest)
library(xts)
library(rvest)
#library(DT)
library(jsonlite)
#library(sf)
library(leaflet)
library(lubridate)
#library(rjson)
#library(geojsonio)
library(httr)
library(dplyr)
library(data.table)
library(leaflet)
#library(geojsonR)
library(rgdal)
library(geofacet)
library(zoo)
library(plotly)
#library(RJSONIO)
#library(rmapshaper)
source('dashboardthemes.r')
options(scipen = 999)
# Initialize state metrics
state_metrics <- c()
# Load data from COVID Tracker
states_current <- jsonlite::fromJSON('https://covidtracking.com/api/states')
states_daily <- jsonlite::fromJSON('https://covidtracking.com/api/states/daily')
states_info <- jsonlite::fromJSON('https://covidtracking.com/api/states/info')
us_current <- jsonlite::fromJSON('http://covidtracking.com/api/us')
us_daily <- jsonlite::fromJSON('https://covidtracking.com/api/us/daily')
#Fix dates
#str(states_current$date)
states_current$date <- as.character(states_current$date)
states_current$date <- as.Date(as.character(states_current$date),format="%Y%m%d")
#str(states_daily$date)
states_daily$date <- as.character(states_daily$date)
states_daily$date <- as.Date(as.character(states_daily$date),format="%Y%m%d")
# Join states_info for additional data and state names
states_current <- states_current %>% left_join (states_info, by="state")
states_daily <- states_daily %>% left_join (states_info, by="state")
states_daily <- states_daily %>% left_join (states_info, by="state")
# Join states_info for additional data and state names
states_current <- states_current %>% left_join (states_info, by="state")
# Join states_info for additional data and state names
states_current <- states_current %>% data.frame() %>% left_join (states_info, by="state")
states_current
str(states_current)
class(states_current)
#Fix dates
#str(states_current$date)
states_current$date <- as.character(states_current$date)
states_current$date <- as.Date(as.character(states_current$date),format="%Y%m%d")
# Load data from COVID Tracker
states_current <- jsonlite::fromJSON('https://covidtracking.com/api/states')
str(states_info)
View(states_current)
# Join states_info for additional data and state names
states_current <- states_current %>% left_join (states_info, by="state")
###################################################
# Load libraries
###################################################
library(shiny)
library(shinydashboard)
library(dygraphs)
library(ggplot2)
library(TTR)
library(rvest)
library(xts)
library(rvest)
#library(DT)
library(jsonlite)
#library(sf)
library(leaflet)
library(lubridate)
#library(rjson)
#library(geojsonio)
library(httr)
library(dplyr)
library(data.table)
library(leaflet)
#library(geojsonR)
library(rgdal)
library(geofacet)
library(zoo)
library(plotly)
#library(RJSONIO)
#library(rmapshaper)
source('dashboardthemes.r')
options(scipen = 999)
###################################################
# Prep COVID-19 Data
###################################################
# Doing all the conditioning separarely in this r scipt
#source('source_covid_data.r')
# Initialize state metrics
state_metrics <- c()
# Load data from COVID Tracker
states_current <- jsonlite::fromJSON('https://covidtracking.com/api/states')
states_daily <- jsonlite::fromJSON('https://covidtracking.com/api/states/daily')
states_info <- jsonlite::fromJSON('https://covidtracking.com/api/states/info')
us_current <- jsonlite::fromJSON('http://covidtracking.com/api/us')
us_daily <- jsonlite::fromJSON('https://covidtracking.com/api/us/daily')
#Fix dates
#str(states_current$date)
states_current$date <- as.character(states_current$date)
states_current$date <- as.Date(as.character(states_current$date),format="%Y%m%d")
#str(states_daily$date)
states_daily$date <- as.character(states_daily$date)
states_daily$date <- as.Date(as.character(states_daily$date),format="%Y%m%d")
# Join states_info for additional data and state names
states_current <- states_current %>% left_join (states_info, by="state")
states_daily <- states_daily %>% left_join (states_info, by="state")
# Get list of metrics for selection
metrics_options <- c('positive', 'negative', 'hospitalizedCurrently', 'hospitalizedCumulative', 'inIcuCurrently', 'inIcuCumulative', 'onVentilatorCurrently', 'onVentilatorCumulative', 'recovered', 'death', 'hospitalized', 'totalTestsViral', 'positiveTestsViral', 'negativeTestsViral', 'positiveIncrease', 'negativeIncrease', 'total', 'totalTestResults', 'deathIncrease', 'hospitalizedIncrease')
# State Names selector
state_names <- unique(states_current$name)
# Create spatialpointsdataframe
states_geo <- rgdal::readOGR("gz_2010_us_040_00_20m.json")
# save the rownames
rnames <- rownames(states_geo@data)
# Add COVID data
states_geo@data <- states_geo@data %>% left_join(states_current, by=c("NAME" = "name"))
# Clone for r leaflet map
states_geo_r <- data.table::copy(states_geo)
runApp()
runApp()
runApp()
###################################################
# Load libraries
###################################################
library(shiny)
library(shinydashboard)
library(dygraphs)
library(ggplot2)
library(TTR)
library(rvest)
library(xts)
library(rvest)
#library(DT)
library(jsonlite)
#library(sf)
library(leaflet)
library(lubridate)
#library(rjson)
#library(geojsonio)
library(httr)
library(dplyr)
library(data.table)
library(leaflet)
#library(geojsonR)
library(rgdal)
library(geofacet)
library(zoo)
library(plotly)
#library(RJSONIO)
#library(rmapshaper)
source('dashboardthemes.r')
options(scipen = 999)
###################################################
# Prep COVID-19 Data
###################################################
# Doing all the conditioning separarely in this r scipt
#source('source_covid_data.r')
# Initialize state metrics
state_metrics <- c()
# Load data from COVID Tracker
states_current <- jsonlite::fromJSON('https://covidtracking.com/api/states')
states_daily <- jsonlite::fromJSON('https://covidtracking.com/api/states/daily')
states_info <- jsonlite::fromJSON('https://covidtracking.com/api/states/info')
us_current <- jsonlite::fromJSON('http://covidtracking.com/api/us')
us_daily <- jsonlite::fromJSON('https://covidtracking.com/api/us/daily')
#Fix dates
#str(states_current$date)
states_current$date <- as.character(states_current$date)
states_current$date <- as.Date(as.character(states_current$date),format="%Y%m%d")
#str(states_daily$date)
states_daily$date <- as.character(states_daily$date)
states_daily$date <- as.Date(as.character(states_daily$date),format="%Y%m%d")
# Join states_info for additional data and state names
states_current <- states_current %>% left_join (states_info, by="state")
states_daily <- states_daily %>% left_join (states_info, by="state")
# Get list of metrics for selection
metrics_options <- c('positive', 'negative', 'hospitalizedCurrently', 'hospitalizedCumulative', 'inIcuCurrently', 'inIcuCumulative', 'onVentilatorCurrently', 'onVentilatorCumulative', 'recovered', 'death', 'hospitalized', 'totalTestsViral', 'positiveTestsViral', 'negativeTestsViral', 'positiveIncrease', 'negativeIncrease', 'total', 'totalTestResults', 'deathIncrease', 'hospitalizedIncrease')
# State Names selector
state_names <- unique(states_current$name)
# Load data from COVID Tracker
states_current <- jsonlite::fromJSON('https://covidtracking.com/api/states')
# Load data from COVID Tracker
states_current <- jsonlite::fromJSON('https://covidtracking.com/api/states')
View(states_current)
# Load data from COVID Tracker
states_current <- jsonlite::fromJSON('https://covidtracking.com/api/states')
#Fix dates
#str(states_current$date)
states_current$date <- as.character(states_current$date)
states_current$date <- as.Date(as.character(states_current$date),format="%Y%m%d")
#str(states_daily$date)
states_daily$date <- as.character(states_daily$date)
states_daily$date <- as.Date(as.character(states_daily$date),format="%Y%m%d")
# Join states_info for additional data and state names
states_current <- states_current %>% left_join (states_info, by="state")
# Load data from COVID Tracker
states_current <- fromJSON('https://covidtracking.com/api/states')
# Load data from COVID Tracker
states_current <- geojsonio::fromJSON('https://covidtracking.com/api/states')
install.packages("geojsonio")
# Load data from COVID Tracker
states_current <- geojsonio::fromJSON('https://covidtracking.com/api/states')
# Load data from COVID Tracker
states_current <- rjson::fromJSON('https://covidtracking.com/api/states')
# Load data from COVID Tracker
states_current <- geojsonR::fromJSON('https://covidtracking.com/api/states')
# Load data from COVID Tracker
states_current <- jsonlite::fromJSON('https://covidtracking.com/api/states', flatten=TRUE)
runApp()
runApp()
runApp()
